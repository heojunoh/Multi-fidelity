import GPy
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.mlab as ml
import matplotlib.patches as mpatches
import pandas as pd
import scipy.stats as stats

import time

l2error= []
meanscore= []
meancrps= []
comptime= []

dim=2
active_dimensions = np.arange(0,dim)
 
Xtest = np.array(pd.read_table("/Users/junoh/Downloads/StackingDesign-Reproducibility/Rmatlab_files/generate_text/Xtest.txt", sep=","))
Exact = np.array(pd.read_table("/Users/junoh/Downloads/StackingDesign-Reproducibility/Rmatlab_files/generate_text/ytest.txt", sep=","))



#########################################



X1 = np.array(pd.read_table("/Users/junoh/Downloads/StackingDesign-Reproducibility/Rmatlab_files/generate_text/temp_to_X.txt", sep=","))
Y1 = np.array(pd.read_table("/Users/junoh/Downloads/StackingDesign-Reproducibility/Rmatlab_files/generate_text/temp_to_r.txt", sep=",", header=None)[3])[:,None]
Y1


X2 = np.array(pd.read_table("/Users/junoh/Downloads/StackingDesign-Reproducibility/Rmatlab_files/generate_text/temp_to_X.txt", sep=","))
Y2 = np.array(pd.read_table("/Users/junoh/Downloads/StackingDesign-Reproducibility/Rmatlab_files/generate_text/temp_to_r.txt", sep=",", header=None)[3])[:,None]
Y2


X3 = np.array(pd.read_table("/Users/junoh/Downloads/StackingDesign-Reproducibility/Rmatlab_files/generate_text/temp_to_X.txt", sep=","))
Y3 = np.array(pd.read_table("/Users/junoh/Downloads/StackingDesign-Reproducibility/Rmatlab_files/generate_text/temp_to_r.txt", sep=",", header=None)[3])[:,None]
Y3


 ''' Train level 1 '''
start = time.time()
k1 = GPy.kern.RBF(dim, ARD = True)
m1 = GPy.models.GPRegression(X=X1, Y=Y1, kernel=k1)

m1[".*Gaussian_noise"] = m1.Y.var()*0.01
m1[".*Gaussian_noise"].fix()

m1.optimize(max_iters = 500)

m1[".*Gaussian_noise"].unfix()
m1[".*Gaussian_noise"].constrain_positive()

m1.optimize_restarts(30, optimizer = "bfgs",  max_iters = 1000)

mu1, v1 = m1.predict(X2)


 ''' Train level 2 '''
XX = np.hstack((X2, mu1))

k2 = GPy.kern.RBF(1, active_dims = [dim])*GPy.kern.RBF(dim, active_dims = active_dimensions, ARD = True) \
+ GPy.kern.RBF(dim, active_dims = active_dimensions, ARD = True)

m2 = GPy.models.GPRegression(X=XX, Y=Y2, kernel=k2)

m2[".*Gaussian_noise"] = m2.Y.var()*0.01
m2[".*Gaussian_noise"].fix()

m2.optimize(max_iters = 500)

m2[".*Gaussian_noise"].unfix()
m2[".*Gaussian_noise"].constrain_positive()

m2.optimize_restarts(30, optimizer = "bfgs",  max_iters = 1000)


 # Prepare for level 3: sample f_1 at X3
nsamples = 100
ntest = X3.shape[0]
mu0, C0 = m1.predict(X3, full_cov=True)
Z = np.random.multivariate_normal(mu0.flatten(),C0,nsamples)
tmp_m = np.zeros((nsamples,ntest))
tmp_v = np.zeros((nsamples,ntest))

 # push samples through f_2
for i in range(0,nsamples):
 mu, v = m2.predict(np.hstack((X3, Z[i,:][:,None])))
 tmp_m[i,:] = mu.flatten()
 tmp_v[i,:] = v.flatten()

 # get mean and variance at X3
mu2 = np.mean(tmp_m, axis = 0)
v2 = np.mean(tmp_v, axis = 0) + np.var(tmp_m, axis = 0)
mu2 = mu2[:,None]
v3 = np.abs(v2[:,None])


 ''' Train level 3 '''
XX = np.hstack((X3, mu2))

k3 = GPy.kern.RBF(1, active_dims = [dim])*GPy.kern.RBF(dim, active_dims = active_dimensions, ARD = True) \
+ GPy.kern.RBF(dim, active_dims = active_dimensions, ARD = True)

m3 = GPy.models.GPRegression(X=XX, Y=Y3, kernel=k3)

m3[".*Gaussian_noise"] = m3.Y.var()*0.01
m3[".*Gaussian_noise"].fix()

m3.optimize(max_iters = 500)

m3[".*Gaussian_noise"].unfix()
m3[".*Gaussian_noise"].constrain_positive()

m3.optimize_restarts(30, optimizer = "bfgs",  max_iters = 1000)


 # Compute posterior mean and variance for level 3 evaluated at the test points

 # sample f_1 at Xtest
nsamples = 100
ntest = Xtest.shape[0]
mu0, C0 = m1.predict(Xtest, full_cov=True)
Z = np.random.multivariate_normal(mu0.flatten(),C0,nsamples)

 # push samples through f_2 and f_3
tmp_m = np.zeros((nsamples**2,ntest))
tmp_v = np.zeros((nsamples**2,ntest))
cnt = 0
for i in range(0,nsamples):
 mu, C = m2.predict(np.hstack((Xtest, Z[i,:][:,None])), full_cov=True)
 Q = np.random.multivariate_normal(mu.flatten(),C,nsamples)
 for j in range(0,nsamples):
  mu, v = m3.predict(np.hstack((Xtest, Q[j,:][:,None])))
  tmp_m[cnt,:] = mu.flatten()
  tmp_v[cnt,:] = v.flatten()
  cnt = cnt + 1


 # get f_2 posterior mean and variance at Xtest
mu3 = np.mean(tmp_m, axis = 0)
v3 = np.mean(tmp_v, axis = 0) + np.var(tmp_m, axis = 0)
mu3 = mu3[:,None]
v3 = np.abs(v3[:,None])
end = time.time()

 # Exact = Exact[:,None]
error = np.sqrt(np.mean((mu3-Exact)**2)) 
crps = np.mean(-np.sqrt(v3)*(1/np.sqrt(np.pi)-2*stats.norm.pdf((Exact-mu3)/np.sqrt(v3))-(Exact-mu3)/np.sqrt(v3)*(2*stats.norm.cdf((Exact-mu3)/np.sqrt(v3))-1)))
ctime = (end - start)

l2error.append(error)
meancrps.append(crps)
comptime.append(ctime)


error

crps

ctime


### L2 error ###
c(1.0420753138760435,0.832895096208084,0.6329019320363519,1.1413116009269428,0.6102757799796953,
  1.193748051371087,1.3713384612262303,0.73978322473752,0.5580145833611799,0.9745274589385106,
  0.8820477939311587,0.8897286719798619,0.6767988544446346,1.0715370006110168,0.858960330404408,
  0.9198344312097143,1.1121968298489184,0.6809845938770238,0.8659838303177538,0.8196213000755781,
  0.7870243777731256,1.0112279339599326,0.8614875051945231,0.6721437171288297,0.8468082598877573,
  0.7199591678568685,1.0258283934618686,0.8317274678733048,0.6891613062418792,0.8852736287144447,
  0.8837799388912227,0.9242335316008499,0.9677113632708415,0.7269838057967194,0.8548806513265977,
  0.6620699565307154,0.8629599794995438,0.5673579250650609,0.9060576920722724,0.7381054908134981,
  0.7022027734954288,0.5938039815564216,1.2717604488907885,1.0428728289710276,0.9728701540351016,
  1.104875445616353,0.8411150578678027,1.493685340056705,1.0398110153803877,0.8490061914124896,
  1.2571147659044144,1.050580699019768,0.7282129040359231,0.8027377058736049,0.7523505007369897,
  1.116008756907758,1.0388081287875062,0.7879424174924324,1.8398710660782496,0.8690856414409532,
  1.1320172649154483,0.8964975303143554,0.6260645381140681,0.6057037210043681,1.7538933470307114,
  1.7196441293243259,0.7489970159001256,0.6979590327160058,0.8328073587592958,0.7502737582052116,
  0.8169163508210506,0.7656615048741846,0.6258275288963138,0.9032378274346261,0.8871257360255547,
  0.6217382237001873,0.8451706786065071,0.9781926464809041,0.6865328589941366,0.7670125479598366,
  1.2319291491828035,0.9040096862733312,0.8289496050624844,0.6953883395596696,0.6689282633510014,
  7.2189440446504145,1.3411672665805743,0.8006809552696801,1.5384673690818098,0.6597653529441555,
  0.6969545642106656,0.9868023443237305,0.563698301330678,1.2946321131713758,0.7000172645385021,
  0.8163368408928801,0.7655137659015698,0.6429170897036909,1.0050115713126218,1.262626183230979)


### Mean CRPS ###
c(0.5663406310647592,0.4062727473895135,0.3951384134156269,0.5192362964732589,0.3876758751414279,
  0.7106002481561182,0.7280261439264542,0.42841189740771535,0.39865674178768384,0.4741109546177563,
  0.5121236445375127,0.5029192518718044,0.45746735482632944,0.580174491731381,0.418430244610993,
  0.5118199659343506,0.5542284844696322,0.3882883714507884,0.5014342386753206,0.44944881876928244,
  0.48000101822151264,0.4737027184910198,0.40919916408543083,0.40531734636973915,0.5100251073155366,
  0.45866606890758027,0.5761807828526182,0.39561390378776673,0.42190200551972923,0.49329310121385384,
  0.4694022469172404,0.46593999428399707,0.4624755098951254,0.42061607259673023,0.4467106220172783,
  0.3352919140914307,0.4233798215858338,0.39560059076624077,0.46118199123598663,0.464569862369807,
  0.4493501209755673,0.4252228399657184,0.6648987200605417,0.529428835424439,0.4602838070498245,
  0.5028094690576125,0.4726198151770727,0.8868435881235325,0.6226612422864897,0.4841913714337195,
  0.6234567397234747,0.5639604489176978,0.4318319392230976,0.39001916903805367,0.456586386660822,
  0.5207134976094417,0.5393228889727515,0.4655792722710897,0.7721080376478093,0.4060530015390958,
  0.5355993753673146,0.445869830027093,0.4497900646359208,0.38945392824182756,0.9151080908725262,
  0.870816294315219,0.49311683188823596,0.4328639384697366,0.4581259633058366,0.45078396782758373,
  0.45655684687163745,0.49170180306704453,0.40912970963373113,0.4293231361613472,0.501200391175456,
  0.48255047956730435,0.4568428870799039,0.561569961034036,0.40612477359438875,0.4377772459400226,
  0.6418985491327406,0.46440293325345494,0.42994103922253,0.3819701276549917,0.37310377774297765,
  2.547423945382226,0.7515435356816337,0.4500961833950432,0.6894454187543262,0.43474714648018575,
  0.4090505449613066,0.5685373169987908,0.4910689376990517,0.7528158332141521,0.4218465163656585,
  0.4876375376369353,0.4811686990556109,0.44247116247206314,0.5316954339597261,0.5835448791646527)

### computation time ###
c(57.210992097854614,52.515292167663574,51.98697018623352,40.5390899181366,57.40332317352295,
  54.187832832336426,46.51872682571411,56.1164710521698,48.046364068984985,49.58849382400513,
  47.863362073898315,49.575170040130615,64.21437788009644,54.55363392829895,56.94933605194092,
  48.44418406486511,48.978755950927734,56.41270112991333,56.16267013549805,51.71186423301697,
  55.95504713058472,63.37623691558838,44.63202381134033,70.51304006576538,53.87605309486389,
  54.408612966537476,51.12649893760681,54.507925033569336,60.02964925765991,59.78327703475952,
  62.40382099151611,58.16776704788208,46.04488182067871,45.13848090171814,45.11353802680969,
  48.58015727996826,45.719802141189575,60.26739001274109,47.04966402053833,38.958991289138794,
  53.319580078125,39.8994517326355,52.09625816345215,45.23401188850403,44.61694598197937,
  53.79419803619385,48.093605041503906,50.4177520275116,55.522732973098755,51.43917989730835,
  45.76927876472473,55.75486087799072,44.73292279243469,58.54252314567566,53.99346876144409,
  51.19088530540466,58.18816089630127,56.85708999633789,54.39968013763428,45.61043190956116,
  57.814192056655884,49.105952978134155,41.73602485656738,39.25504016876221,59.942341804504395,
  42.92057704925537,54.745412826538086,49.76670694351196,57.30726504325867,47.714033365249634,
  57.12360215187073,60.91770029067993,55.36907911300659,57.81877136230469,46.931219816207886,
  52.541855812072754,45.59235405921936,52.95319581031799,52.92681407928467,54.860633850097656,
  49.925386905670166,49.330206871032715,47.78261208534241,62.594481229782104,65.85674095153809,
  58.883220911026,59.58738923072815,67.32407808303833,55.25428891181946,54.58192706108093,
  59.546602964401245,58.44491505622864,62.15740180015564,54.20301365852356,63.7052264213562,
  59.57503700256348,56.688403844833374,48.72521114349365,54.98762488365173,58.33078980445862)




# 
# np.mean(l2error) 
# np.sort(l2error) 
# 
# np.mean(meancrps) 
# np.sort(meancrps) 
