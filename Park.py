import GPy
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.mlab as ml
import matplotlib.patches as mpatches
import scipy.stats as stats

import time

l2error= []
meanscore= []
meancrps= []
comptime= []

for kk in range(1, 101): 
 np.random.seed(kk)

 def high(x):
  x1 = x[:,0]
  x2 = x[:,1]
  x3 = x[:,2]
  x4 = x[:,3]
  return ((x1 / 2) * (np.sqrt(1+(x2+x3**2)*x4/(x1**2))-1) + (x1+3*x4)* np.exp(1+np.sin(x3)))

 def low(x):
  x1 = x[:,0]
  x2 = x[:,1]
  x3 = x[:,2]
  x4 = x[:,3]
  return (1+np.sin(x1)/10)*high(x) - 2*x1+x2**2+x3**2+0.5

 def scale_range(x,ub,lb):
  Np = x.shape[0]
  dim = x.shape[1]
  for i in range(0,Np):
   for j in range(0,dim):
    tmp = ub[j] -lb[j]
    x[i][j] = tmp*x[i][j] + lb[j]
  return x

 ''' Define training and test points '''

 ''' Create training set '''
 N1 = 40
 N2 = 20

 plot = 1
 save = 0

 dim = 4
 lb = np.array([0, 0, 0, 0])
 ub = np.array([1, 1, 1, 1])

 tmp = np.random.rand(1000,dim)
 Xtrain = scale_range(tmp,ub,lb)
 idx = np.random.permutation(1000)
 X1 = Xtrain[idx[0:N1], :]
 X2 = Xtrain[idx[0:N2], :]

 Y1 = low(X1)[:,None]
 Y2 = high(X2)[:,None]

 nn = 40
 x1 = np.linspace(lb[0], ub[0], 50)
 x2 = np.linspace(lb[1], ub[1], 50)
 X, Y = np.meshgrid(x1, x2)

 tmp = np.random.rand(1000,dim)
 Xtest = scale_range(tmp,ub,lb)

 Exact = high(Xtest)
 Low = low(Xtest)
 
 active_dimensions = np.arange(0,dim)

 ''' Train level 1 '''
 start = time.time()
 k1 = GPy.kern.RBF(dim, ARD = True)
 m1 = GPy.models.GPRegression(X=X1, Y=Y1, kernel=k1)

 m1[".*Gaussian_noise"] = m1.Y.var()*0.01
 m1[".*Gaussian_noise"].fix()

 m1.optimize(max_iters = 500)

 m1[".*Gaussian_noise"].unfix()
 m1[".*Gaussian_noise"].constrain_positive()

 m1.optimize_restarts(30, optimizer = "bfgs",  max_iters = 1000)

 mu1, v1 = m1.predict(X2)


 ''' Train level 2 '''
 XX = np.hstack((X2, mu1))

 k2 = GPy.kern.RBF(1, active_dims = [dim])*GPy.kern.RBF(dim, active_dims = active_dimensions, ARD = True) \
 + GPy.kern.RBF(dim, active_dims = active_dimensions, ARD = True)

 m2 = GPy.models.GPRegression(X=XX, Y=Y2, kernel=k2)

 m2[".*Gaussian_noise"] = m2.Y.var()*0.01
 m2[".*Gaussian_noise"].fix()

 m2.optimize(max_iters = 500)

 m2[".*Gaussian_noise"].unfix()
 m2[".*Gaussian_noise"].constrain_positive()

 m2.optimize_restarts(30, optimizer = "bfgs",  max_iters = 1000)


 ''' Predict at test points '''
 # sample f_1 at xtest
 nsamples = 100
 ntest = Xtest.shape[0]
 mu1, C1 = m1.predict(Xtest, full_cov=True)
 Z = np.random.multivariate_normal(mu1.flatten(),C1,nsamples)

 # push samples through f_2
 tmp_m = np.zeros((nsamples,ntest))
 tmp_v = np.zeros((nsamples,ntest))
 for i in range(0,nsamples):
  mu, v = m2.predict(np.hstack((Xtest, Z[i,:][:,None])))
  tmp_m[i,:] = mu.flatten()
  tmp_v[i,:] = v.flatten()

 # get posterior mean and variance
 mean = np.mean(tmp_m, axis = 0)[:,None]
 var = np.mean(tmp_v, axis = 0)[:,None]+ np.var(tmp_m, axis = 0)[:,None]
 var = np.abs(var)
 end = time.time()
 
 Exact = Exact[:,None]
 
 error = np.sqrt(np.mean((mean-Exact)**2))
 score = np.mean(-(Exact-mean)**2/var-np.log(var))
 crps = np.mean(-np.sqrt(var)*(1/np.sqrt(np.pi)-2*stats.norm.pdf((Exact-mean)/np.sqrt(var))-(Exact-mean)/np.sqrt(var)*(2*stats.norm.cdf((Exact-mean)/np.sqrt(var))-1)))
 ctime = (end - start)
 # print( "N1 = %d, N2 = %d, sample = %d, error = %e" % (N1, N2[ii], jj+1, error))

 l2error.append(error)
 meanscore.append(score)
 meancrps.append(crps)
 comptime.append(ctime)


l2error
np.mean(l2error) # 0.04335878
np.sort(l2error) 

meanscore 
np.mean(meanscore) 
np.sort(meanscore) 

meancrps
np.mean(meancrps) # 0.0224146668
np.sort(meancrps) 

comptime

############################ np.sqrt(np.mean((pred-truth)**2)) 

### RMSE ###
c(0.01543141, 0.01883533, 0.01972081, 0.0213297 , 0.02240312,
       0.02270992, 0.02487475, 0.02556971, 0.02569795, 0.026073  ,
       0.02608532, 0.02721259, 0.02726363, 0.02741558, 0.02744942,
       0.02746237, 0.02760419, 0.02770499, 0.02801725, 0.02918555,
       0.0300006 , 0.03055055, 0.03081576, 0.03087383, 0.03109054,
       0.03131905, 0.03133921, 0.03221839, 0.03278523, 0.03281587,
       0.03301657, 0.03324136, 0.03391592, 0.03466853, 0.03492661,
       0.03507629, 0.03530289, 0.03556985, 0.03561982, 0.03586804,
       0.03596458, 0.03621814, 0.0363974 , 0.03671399, 0.03684868,
       0.03735715, 0.03737333, 0.03757   , 0.03785317, 0.03818831,
       0.03826123, 0.0386512 , 0.03943591, 0.04010671, 0.04013234,
       0.04107583, 0.0420315 , 0.04234557, 0.04235512, 0.04248894,
       0.04276381, 0.04302345, 0.04372843, 0.04385263, 0.04569816,
       0.0461708 , 0.0462578 , 0.04760623, 0.04815232, 0.04850794,
       0.04945962, 0.04952686, 0.05046353, 0.05080539, 0.05145118,
       0.05168263, 0.05252429, 0.05318832, 0.05348071, 0.05403466,
       0.05678712, 0.0577028 , 0.0577662 , 0.05849376, 0.06050538,
       0.06059728, 0.06067097, 0.06178511, 0.06209458, 0.06247924,
       0.06324842, 0.06385329, 0.06440754, 0.07095728, 0.0732427 ,
       0.08368189, 0.09488221, 0.09797853, 0.10284276, 0.11309177)

### mean CRPS result.park.meancrps ### The smaller, the better
c(0.0077333 , 0.00940334, 0.01037537, 0.01071631, 0.01215122,
       0.01246912, 0.01258697, 0.01325076, 0.01348918, 0.01350012,
       0.01378779, 0.01380279, 0.01406547, 0.01411974, 0.01423231,
       0.01428311, 0.01453217, 0.01458184, 0.01484368, 0.01486118,
       0.01524672, 0.015531  , 0.01562671, 0.01575025, 0.01630846,
       0.01656625, 0.01669695, 0.01685203, 0.01690171, 0.01693753,
       0.01722525, 0.01724074, 0.01725906, 0.01732064, 0.01736938,
       0.01759915, 0.01767862, 0.01793282, 0.01798829, 0.01813647,
       0.01831486, 0.01885326, 0.01892137, 0.01909389, 0.01918683,
       0.01923887, 0.01953403, 0.01984809, 0.01990239, 0.0199531 ,
       0.02001505, 0.02001579, 0.02037022, 0.02047832, 0.02065944,
       0.02169165, 0.0221693 , 0.02236053, 0.02264802, 0.02279485,
       0.0231223 , 0.02391821, 0.02394734, 0.02396089, 0.02397694,
       0.02407729, 0.02412081, 0.02419562, 0.0246353 , 0.02497756,
       0.02525212, 0.02538408, 0.02634231, 0.02648956, 0.02682843,
       0.02746085, 0.0278626 , 0.0279504 , 0.02896078, 0.03004806,
       0.03005748, 0.03046396, 0.03076343, 0.03118792, 0.03157026,
       0.03158957, 0.03168303, 0.03340951, 0.03344207, 0.0343543 ,
       0.03574715, 0.03675782, 0.036798  , 0.03707381, 0.03962727,
       0.04007912, 0.04251469, 0.04393943, 0.04686675, 0.04702597)

### computation time result.park.comptime ### The smaller, the better
c(37.59697079658508, 38.284141063690186, 48.01426720619202, 49.72091484069824, 40.468273878097534, 
72.36816811561584, 53.14524006843567, 57.79141402244568, 57.793092012405396, 67.21538805961609, 
63.308337926864624, 70.35309505462646, 55.83506202697754, 75.59888887405396, 56.60691595077515, 
65.50443291664124, 72.42974328994751, 52.16663980484009, 55.941831827163696, 51.217947006225586, 
61.65242314338684, 59.505435943603516, 69.45346474647522, 48.75571894645691, 49.88899302482605, 
46.45164394378662, 47.82719326019287, 72.98168015480042, 52.37946820259094, 72.53865194320679, 
66.71575880050659, 47.082996129989624, 54.51527810096741, 56.45328712463379, 54.735270977020264, 
45.335487842559814, 64.70993304252625, 74.58084201812744, 60.62234807014465, 85.19076013565063, 
40.25997591018677, 56.78615617752075, 53.69546890258789, 81.31187105178833, 66.47054076194763, 
64.86935496330261, 58.13776111602783, 49.64909291267395, 57.85577392578125, 68.54154515266418, 
39.86267280578613, 41.29041910171509, 69.75921583175659, 53.208172082901, 62.091586112976074, 
64.73214483261108, 64.6875729560852, 53.90369987487793, 65.9427239894867, 54.63913702964783, 
62.38015675544739, 63.685375928878784, 57.33064889907837, 51.27383279800415, 46.67505383491516, 
72.6160261631012, 51.69126915931702, 57.06262683868408, 65.0576171875, 87.18740820884705, 
58.21577310562134, 55.46340012550354, 42.650124073028564, 56.20947003364563, 47.498610973358154, 
46.2004599571228, 58.55592608451843, 73.1507019996643, 44.24789786338806, 82.06606888771057, 
60.84273290634155, 56.2906608581543, 51.66313624382019, 51.88989973068237, 44.84682822227478, 
60.61213994026184, 53.8550820350647, 63.2651309967041, 61.434524059295654, 62.52141308784485, 
75.24477577209473, 76.4413161277771, 53.047552824020386, 45.835747957229614, 71.38743782043457, 
56.08518886566162, 36.63569402694702, 61.86357665061951, 61.033599853515625, 56.07898783683777)



